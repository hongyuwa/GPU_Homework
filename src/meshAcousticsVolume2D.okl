#define RXID 0
#define RYID 1
#define SXID 2
#define SYID 3

// function to compute collocation differentiation
// contributions to nodal DG rhs for acoustics
kernel void meshAcousticsVolume2D_o0(const iint Nelements,
				     const dfloat * restrict vgeo,
				     const dfloat * restrict DT,
				     const dfloat * restrict q,
				     dfloat * restrict rhsq){
  for(iint e=0;e<Nelements;++e;outer0){  // for all elements
    for(iint j=0;j<p_N+1;++j;inner1){
      for(iint i=0;i<p_N+1;++i;inner0){

	iint n = i + (p_N+1)*j;

        // prefetch geometric factors (constant on triangle)
	iint gid = e*p_Nvgeo*p_Np + n;
        const dfloat drdx = vgeo[gid + p_Np*RXID];
        const dfloat drdy = vgeo[gid + p_Np*RYID];
        const dfloat dsdx = vgeo[gid + p_Np*SXID];
        const dfloat dsdy = vgeo[gid + p_Np*SYID];

        // compute 'r' and 's' derivatives of (u,v,p) at node n
        dfloat dudr = 0, duds = 0;
        dfloat dvdr = 0, dvds = 0;
        dfloat dpdr = 0, dpds = 0;

        for(iint m=0;m<p_N+1;++m){
          // load data at node i of element e
          const iint idr = p_Nfields*(e*p_Np + m + j*(p_N+1));
          const iint ids = p_Nfields*(e*p_Np + i + m*(p_N+1));
          const dfloat ur = q[idr+0];
	  const dfloat us = q[ids+0];
	  const dfloat vr = q[idr+1];
	  const dfloat vs = q[ids+1];
	  const dfloat pr = q[idr+2];
	  const dfloat ps = q[ids+2];

          const dfloat Drni = DT[m*(p_N+1) + i];
          const dfloat Dsni = DT[m*(p_N+1) + j];

          // differentiate (u,v,p) with respect to 'r' and 's'
          dudr += Drni*ur; duds += Dsni*us;
          dvdr += Drni*vr; dvds += Dsni*vs;
          dpdr += Drni*pr; dpds += Dsni*ps;
        }

        // chain rule
        const dfloat dudx = drdx*dudr + dsdx*duds;
        const dfloat dvdy = drdy*dvdr + dsdy*dvds;
        const dfloat dpdx = drdx*dpdr + dsdx*dpds;
        const dfloat dpdy = drdy*dpdr + dsdy*dpds;

        // store acoustics rhs contributions from collocation differentiation
        const iint id = p_Nfields*(e*p_Np + n);
        rhsq[id+0] = -dpdx;
        rhsq[id+1] = -dpdy;
        rhsq[id+2] = -dudx-dvdy;
      }
    }
  }
}

#if 1

// o1: float4s
kernel void meshAcousticsVolume2D_o1(const iint Nelements,
				     const dfloat * restrict vgeo,
				     const dfloat * restrict DT,
				     const dfloat4 * restrict q4,
				     dfloat4 * restrict rhsq4){

  for(iint e=0;e<Nelements;++e;outer0){  // for all elements
    for(iint j=0;j<p_N+1;++j;inner1){
      for(iint i=0;i<p_N+1;++i;inner0){

	iint n = i + (p_N+1)*j;

        // prefetch geometric factors (constant on triangle)
	iint gid = e*p_Nvgeo*p_Np + n;
        const dfloat drdx = vgeo[gid + p_Np*RXID];
        const dfloat drdy = vgeo[gid + p_Np*RYID];
        const dfloat dsdx = vgeo[gid + p_Np*SXID];
        const dfloat dsdy = vgeo[gid + p_Np*SYID];

        // compute 'r' and 's' derivatives of (u,v,p) at node n
        dfloat dudr = 0, duds = 0;
        dfloat dvdr = 0, dvds = 0;
        dfloat dpdr = 0, dpds = 0;

        for(iint m=0;m<p_N+1;++m){
          // load data at node i of element e
          const iint idr = e*p_Np + m + j*(p_N+1);
          const iint ids = e*p_Np + i + m*(p_N+1);
	  const dfloat4 qr4i = q4[idr];
	  const dfloat4 qs4i = q4[ids];
          const dfloat ur = qr4i.x;
	  const dfloat us = qs4i.x;
	  const dfloat vr = qr4i.y;
	  const dfloat vs = qs4i.y;
	  const dfloat pr = qr4i.z;
	  const dfloat ps = qs4i.z;

          const dfloat Drni = DT[m*(p_N+1) + i];
          const dfloat Dsni = DT[m*(p_N+1) + j];

          // differentiate (u,v,p) with respect to 'r' and 's'
          dudr += Drni*ur; duds += Dsni*us;
          dvdr += Drni*vr; dvds += Dsni*vs;
          dpdr += Drni*pr; dpds += Dsni*ps;
        }

        // chain rule
        const dfloat dudx = drdx*dudr + dsdx*duds;
        const dfloat dvdy = drdy*dvdr + dsdy*dvds;
        const dfloat dpdx = drdx*dpdr + dsdx*dpds;
        const dfloat dpdy = drdy*dpdr + dsdy*dpds;

        // store acoustics rhs contributions from collocation differentiation
        const iint id = e*p_Np + n;
        dfloat4 rhsq4n;
        rhsq4n.x = -dpdx;
        rhsq4n.y = -dpdy;
        rhsq4n.z = -dudx-dvdy;
        rhsq4[id] = rhsq4n;
      }
    }
  }
}

// o2: load q into shared
kernel void meshAcousticsVolume2D_o2(const iint Nelements,
				     const dfloat * restrict vgeo,
				     const dfloat * restrict DT,
				     const dfloat4 * restrict q4,
				     dfloat4 * restrict rhsq4){

  for(iint e=0;e<Nelements;++e;outer0){  // for all elements

    shared dfloat s_u[p_Np], s_v[p_Np], s_p[p_Np];

    for(iint n=0;n<p_Np;++n;inner0){     // for all nodes in this element
      const iint id = e*p_Np + n;
      const dfloat4 q4n = q4[id];
      s_u[n] = q4n.x;
      s_v[n] = q4n.y;
      s_p[n] = q4n.z;
    }

    // make sure all node data is loaded into shared
    barrier(localMemFence);

    for(iint n=0;n<p_Np;++n;inner0){     // for all nodes in this element

      iint i = n%(p_N+1);
      iint j = n/(p_N+1);

      // prefetch geometric factors (constant on triangle)
      iint gid = e*p_Nvgeo*p_Np + n;
      const dfloat drdx = vgeo[gid + p_Np*RXID];
      const dfloat drdy = vgeo[gid + p_Np*RYID];
      const dfloat dsdx = vgeo[gid + p_Np*SXID];
      const dfloat dsdy = vgeo[gid + p_Np*SYID];

      // compute 'r' and 's' derivatives of (u,v,p) at node n
      dfloat dudr = 0, duds = 0;
      dfloat dvdr = 0, dvds = 0;
      dfloat dpdr = 0, dpds = 0;

      for(iint m=0;m<p_N+1;++m){
        // load data at node i of element e
        const iint idr = m + j*(p_N+1);
        const iint ids = i + m*(p_N+1);

        const dfloat Drni = DT[m*(p_N+1) + i];
        const dfloat Dsni = DT[m*(p_N+1) + j];

        // differentiate (u,v,p) with respect to 'r' and 's'
        dudr += Drni*s_u[idr]; duds += Dsni*s_u[ids];
        dvdr += Drni*s_v[idr]; dvds += Dsni*s_v[ids];
        dpdr += Drni*s_p[idr]; dpds += Dsni*s_p[ids];
      }

      // chain rule
      const dfloat dudx = drdx*dudr + dsdx*duds;
      const dfloat dvdy = drdy*dvdr + dsdy*dvds;
      const dfloat dpdx = drdx*dpdr + dsdx*dpds;
      const dfloat dpdy = drdy*dpdr + dsdy*dpds;

      // store acoustics rhs contributions from collocation differentiation
      const iint id = e*p_Np + n;
      dfloat4 rhsq4n;
      rhsq4n.x = -dpdx;
      rhsq4n.y = -dpdy;
      rhsq4n.z = -dudx-dvdy;
      rhsq4[id] = rhsq4n;
    }

  }
}

// o3: multiple elements for each outer iteration
kernel void meshAcousticsVolume2D_o3(const iint Nelements,
				     const dfloat * restrict vgeo,
				     const dfloat * restrict DT,
				     const dfloat4 * restrict q4,
				     dfloat4 * restrict rhsq4){

  for(iint eo=0;eo<Nelements;eo+=p_NblockV;outer0){  // for all elements

    shared dfloat s_u[p_NblockV][p_Np];
    shared dfloat s_v[p_NblockV][p_Np];
    shared dfloat s_p[p_NblockV][p_Np];

    for(iint es=0;es<p_NblockV;++es;inner1){// for all elements in block
      for(iint n=0;n<p_Np;++n;inner0){     // for all nodes in this element

	iint e = eo+es; // element in block
	if(e<Nelements){
	  const iint id = e*p_Np + n;
	  const dfloat4 q4n = q4[id];
	  s_u[es][n] = q4n.x;
	  s_v[es][n] = q4n.y;
	  s_p[es][n] = q4n.z;
	}
      }
    }

    // make sure all node data is loaded into shared
    barrier(localMemFence);

    for(iint es=0;es<p_NblockV;++es;inner1){// for all elements in block
      for(iint n=0;n<p_Np;++n;inner0){     // for all nodes in this element

	iint e = eo+es; // element in block
	if(e<Nelements){

          iint i = n%(p_N+1);
          iint j = n/(p_N+1);

          // prefetch geometric factors (constant on triangle)
	  iint gid = e*p_Nvgeo*p_Np + n;
          const dfloat drdx = vgeo[gid + p_Np*RXID];
          const dfloat drdy = vgeo[gid + p_Np*RYID];
          const dfloat dsdx = vgeo[gid + p_Np*SXID];
          const dfloat dsdy = vgeo[gid + p_Np*SYID];

	  // compute 'r' and 's' derivatives of (u,v,p) at node n
	  dfloat dudr = 0, duds = 0;
	  dfloat dvdr = 0, dvds = 0;
	  dfloat dpdr = 0, dpds = 0;

          for(iint m=0;m<p_N+1;++m){
            const iint idr = m + j*(p_N+1);
            const iint ids = i + m*(p_N+1);

            const dfloat Drni = DT[m*(p_N+1) + i];
            const dfloat Dsni = DT[m*(p_N+1) + j];

            // differentiate (u,v,p) with respect to 'r' and 's'
            dudr += Drni*s_u[es][idr]; duds += Dsni*s_u[es][ids];
            dvdr += Drni*s_v[es][idr]; dvds += Dsni*s_v[es][ids];
            dpdr += Drni*s_v[es][idr]; dpds += Dsni*s_p[es][ids];
          }

	  // chain rule
	  const dfloat dudx = drdx*dudr + dsdx*duds;
	  const dfloat dvdy = drdy*dvdr + dsdy*dvds;
	  const dfloat dpdx = drdx*dpdr + dsdx*dpds;
	  const dfloat dpdy = drdy*dpdr + dsdy*dpds;

	  // store acoustics rhs contributions from collocation differentiation
	  const iint id = e*p_Np + n;
	  dfloat4 rhsq4n;
	  rhsq4n.x = -dpdx;
	  rhsq4n.y = -dpdy;
	  rhsq4n.z = -dudx-dvdy;
	  rhsq4[id] = rhsq4n;
	}
      }
    }
  }
}

// o4: unroll
kernel void meshAcousticsVolume2D_o4(const iint Nelements,
				     const dfloat * restrict vgeo,
				     const dfloat * restrict DT,
				     const dfloat4 * restrict q4,
				     dfloat4 * restrict rhsq4){

  for(iint eo=0;eo<Nelements;eo+=p_NblockV;outer0){  // for all elements

    shared dfloat s_u[p_NblockV][p_Np];
    shared dfloat s_v[p_NblockV][p_Np];
    shared dfloat s_p[p_NblockV][p_Np];

    for(iint es=0;es<p_NblockV;++es;inner1){// for all elements in block
      for(iint n=0;n<p_Np;++n;inner0){     // for all nodes in this element

	iint e = eo+es; // element in block
	if(e<Nelements){
	  const iint id = e*p_Np + n;
	  const dfloat4 q4n = q4[id];
	  s_u[es][n] = q4n.x;
	  s_v[es][n] = q4n.y;
	  s_p[es][n] = q4n.z;
	}
      }
    }

    // make sure all node data is loaded into shared
    barrier(localMemFence);

    for(iint es=0;es<p_NblockV;++es;inner1){// for all elements in block
      for(iint n=0;n<p_Np;++n;inner0){     // for all nodes in this element

	iint e = eo+es; // element in block
	if(e<Nelements){

          iint i = n%(p_N+1);
          iint j = n/(p_N+1);

          // prefetch geometric factors (constant on triangle)
	  iint gid = e*p_Nvgeo*p_Np + n;
          const dfloat drdx = vgeo[gid + p_Np*RXID];
          const dfloat drdy = vgeo[gid + p_Np*RYID];
          const dfloat dsdx = vgeo[gid + p_Np*SXID];
          const dfloat dsdy = vgeo[gid + p_Np*SYID];

	  // compute 'r' and 's' derivatives of (u,v,p) at node n
	  dfloat dudr = 0, duds = 0;
	  dfloat dvdr = 0, dvds = 0;
	  dfloat dpdr = 0, dpds = 0;

          occaUnroll(p_N+1)
          for(iint m=0;m<p_N+1;++m){
            const iint idr = m + j*(p_N+1);
            const iint ids = i + m*(p_N+1);

            const dfloat Drni = DT[m*(p_N+1) + i];
            const dfloat Dsni = DT[m*(p_N+1) + j];

            // differentiate (u,v,p) with respect to 'r' and 's'
            dudr += Drni*s_u[es][idr]; duds += Dsni*s_u[es][ids];
            dvdr += Drni*s_v[es][idr]; dvds += Dsni*s_v[es][ids];
            dpdr += Drni*s_v[es][idr]; dpds += Dsni*s_p[es][ids];
          }

	  // chain rule
	  const dfloat dudx = drdx*dudr + dsdx*duds;
	  const dfloat dvdy = drdy*dvdr + dsdy*dvds;
	  const dfloat dpdx = drdx*dpdr + dsdx*dpds;
	  const dfloat dpdy = drdy*dpdr + dsdy*dpds;

	  // store acoustics rhs contributions from collocation differentiation
	  const iint id = e*p_Np + n;
	  dfloat4 rhsq4n;
	  rhsq4n.x = -dpdx;
	  rhsq4n.y = -dpdy;
	  rhsq4n.z = -dudx-dvdy;
	  rhsq4[id] = rhsq4n;
	}
      }
    }
  }
}

// o5: D into shared
kernel void meshAcousticsVolume2D_o5(const iint Nelements,
				     const dfloat * restrict vgeo,
				     const dfloat * restrict DT,
				     const dfloat4 * restrict q4,
				     dfloat4 * restrict rhsq4){

  for(iint eo=0;eo<Nelements;eo+=p_NblockV;outer0){  // for all elements

    shared dfloat s_u[p_NblockV][p_Np];
    shared dfloat s_v[p_NblockV][p_Np];
    shared dfloat s_p[p_NblockV][p_Np];

    shared dfloat s_DT[p_N+1][p_N+1];

    for(iint es=0;es<p_NblockV;++es;inner1){// for all elements in block
      for(iint n=0;n<p_Np;++n;inner0){     // for all nodes in this element
	// prefetch D into shared
	s_DT[0][n] = DT[n];

	iint e = eo+es; // element in block
	if(e<Nelements){
	  const iint id = e*p_Np + n;
	  const dfloat4 q4n = q4[id];
	  s_u[es][n] = q4n.x;
	  s_v[es][n] = q4n.y;
	  s_p[es][n] = q4n.z;
	}
      }
    }

    // make sure all node data is loaded into shared
    barrier(localMemFence);

    for(iint es=0;es<p_NblockV;++es;inner1){// for all elements in block
      for(iint n=0;n<p_Np;++n;inner0){     // for all nodes in this element

	iint e = eo+es; // element in block
	if(e<Nelements){

          iint i = n%(p_N+1);
          iint j = n/(p_N+1);

          // prefetch geometric factors (constant on triangle)
	  iint gid = e*p_Nvgeo*p_Np + n;
          const dfloat drdx = vgeo[gid + p_Np*RXID];
          const dfloat drdy = vgeo[gid + p_Np*RYID];
          const dfloat dsdx = vgeo[gid + p_Np*SXID];
          const dfloat dsdy = vgeo[gid + p_Np*SYID];

	  // compute 'r' and 's' derivatives of (u,v,p) at node n
	  dfloat dudr = 0, duds = 0;
	  dfloat dvdr = 0, dvds = 0;
	  dfloat dpdr = 0, dpds = 0;

          occaUnroll(p_N+1)
          for(iint m=0;m<p_N+1;++m){
            const iint idr = m + j*(p_N+1);
            const iint ids = i + m*(p_N+1);

            const dfloat Drni = s_DT[m][i];
	    const dfloat Dsni = s_DT[m][j];

	    // differentiate (u,v,p) with respect to 'r' and 's'
            dudr += Drni*s_u[es][idr]; duds += Dsni*s_u[es][ids];
            dvdr += Drni*s_v[es][idr]; dvds += Dsni*s_v[es][ids];
            dpdr += Drni*s_v[es][idr]; dpds += Dsni*s_p[es][ids];
	  }

	  // chain rule
	  const dfloat dudx = drdx*dudr + dsdx*duds;
	  const dfloat dvdy = drdy*dvdr + dsdy*dvds;
	  const dfloat dpdx = drdx*dpdr + dsdx*dpds;
	  const dfloat dpdy = drdy*dpdr + dsdy*dpds;

	  // store acoustics rhs contributions from collocation differentiation
	  const iint id = e*p_Np + n;
	  dfloat4 rhsq4n;
	  rhsq4n.x = -dpdx;
	  rhsq4n.y = -dpdy;
	  rhsq4n.z = -dudx-dvdy;
	  rhsq4[id] = rhsq4n;
	}
      }
    }
  }
}

#endif

